
package BubbleSort;

public class YourSort implements SortInterface<Integer>{
    private long finish,start,initial,end;
    private int count;
    private Boolean swap;
    private Integer[] sorted;
    private long memory;
    
    public YourSort(){}
      
    public Integer[] recursiveSort(Integer[] array){
        start=System.nanoTime();
        sorted=array;
        swap=false;
        for(int a=0;a<array.length-1;a++){
            Integer left=array[a];
            Integer right=array[a+1];    
            if(right.compareTo(left)==-1){
                Swap(a,a+1);swap=true;count++;}}    
        if(swap){recursiveSort(sorted);}
        finish=System.nanoTime();
        getTime();
        return sorted;}
         
    public Integer[] iterativeSort(Integer[] array){
        start=System.nanoTime();
        sorted=array;
        do{
            swap=false;
            for(int a=0;a<array.length-1;a++){
                Integer left=array[a];
                Integer right=array[a+1];
                if(right.compareTo(left)==-1){
                    Swap(a,a+1);swap=true;count++;}}
        }while(swap);
        finish=System.nanoTime();
        getTime();
        return sorted;}
    
    public int getCount(){return count;}
    
    public long getTime(){
        long time=finish-start;
        return time;}
    
    public long getMemory(){
       long memory=0;
       return memory;}
    
    public void Swap(int i,int j){
        Integer temp=sorted[i];
        sorted[i]=sorted[j];
        sorted[j]=temp;}
    
    public String toString(){
        String s="";
        long time=this.getTime();
        s+="\n";
        s+=" "+getTime()+", ";
        s+=getCount()+", "+"\n";
        return s;}
}
